diff a/CONTRIBUTING.md b/CONTRIBUTING.md	(rejected hunks)
@@ -3,6 +3,13 @@
 We'd love to accept your patches and contributions to this project. There are
 just a few small guidelines you need to follow.
 
+## Project Structure
+
+Kubeflow Pipelines consists of multiple components. Before you begin, learn how to [build the Kubeflow Pipelines component container images](./developer_guide.md##build-image). To get started, see the development guides:
+
+* [Frontend development guide](./frontend/README.md)
+* [Backend development guide](./backend/README.md)
+
 ## Contributor License Agreement
 
 Contributions to this project must be accompanied by a Contributor License
@@ -20,16 +27,18 @@ again.
 The Python part of the project will follow [Google Python style guide](http://google.github.io/styleguide/pyguide.html). We provide a [yapf](https://github.com/google/yapf) configuration file to help contributors auto-format their code to adopt the Google Python style. Also, it is encouraged to lint python docstrings by [docformatter](https://github.com/myint/docformatter).
 
 The frontend part of the project uses [prettier](https://prettier.io/) for formatting, read [frontend/README.md#code-style](frontend/README.md#code-style) for more details.
+
 ## Unit Testing Best Practices
 
 * Testing via Public APIs
 
 ### Golang
+
 * Put your tests in a different package: Moving your test code out of the package allows you to write tests as though you were a real user of the package. You cannot fiddle around with the internals,
-instead you focus on the exposed interface and are always thinking about any noise that you might be adding to your API. Usually the test code will be put under the same folder
-but with a package suffix of `_test`. https://golang.org/src/go/ast/example_test.go (example)
+  instead you focus on the exposed interface and are always thinking about any noise that you might be adding to your API. Usually the test code will be put under the same folder
+  but with a package suffix of `_test`. https://golang.org/src/go/ast/example_test.go (example)
 * Internal tests go in a different file: If you do need to unit test some internals, create another file with `_internal_test.go`
-as the suffix.
+  as the suffix.
 * Write table driven tests: https://github.com/golang/go/wiki/TableDrivenTests (example)
 
 ## Code reviews
@@ -58,20 +69,24 @@ Examples:
 The following sections describe the details of the PR title convention.
 
 ### PR Title Structure
+
 PR titles should use the following structure.
+
 ```
 <type>[optional scope]: <description>[ Fixes #<issue-number>]
 ```
 
 Replace the following:
 
-*  **`<type>`**: The PR type describes the reason for the change, such as `fix` to indicate that the PR fixes a bug. More information about PR types is available in the next section. 
-*  **`[optional scope]`**: (Optional.) The PR scope describes the part of Kubeflow Pipelines that this PR changes, such as `frontend` to indicate that the change affects the user interface. Choose a scope according to [PR Scope section](#pr-scope).
-*  **`<description>`**: A user friendly description of this change.
-*  **`[ Fixes #<issues-number>]`**: (Optional.) Specifies the issues fixed by this PR.
+* **`<type>`**: The PR type describes the reason for the change, such as `fix` to indicate that the PR fixes a bug. More information about PR types is available in the next section.
+* **`[optional scope]`**: (Optional.) The PR scope describes the part of Kubeflow Pipelines that this PR changes, such as `frontend` to indicate that the change affects the user interface. Choose a scope according to [PR Scope section](#pr-scope).
+* **`<description>`**: A user friendly description of this change.
+* **`[ Fixes #<issues-number>]`**: (Optional.) Specifies the issues fixed by this PR.
 
 ### PR Type
+
 Type can be one of the following:
+
 * **feat**: A new feature.
 * **fix**: A bug fix. However, a PR that fixes test infrastructure is not user facing, so it should use the test type instead.
 * **docs**: Documentation changes.
@@ -89,7 +104,9 @@ If you are not sure which type your PR is and it does not have user impact,
 use `chore` as the fallback.
 
 ### PR Scope
+
 Scope is optional, it can be one of the following:
+
 * **frontend**: user interface or frontend server related, folder `frontend`, `frontend/server`
 * **backend**: Backend, folder `backend`
 * **sdk**: `kfp` python package, folder `sdk`
