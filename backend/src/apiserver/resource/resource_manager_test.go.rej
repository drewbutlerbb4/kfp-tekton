diff a/backend/src/apiserver/resource/resource_manager_test.go b/backend/src/apiserver/resource/resource_manager_test.go	(rejected hunks)
@@ -225,7 +225,8 @@ func TestCreatePipeline(t *testing.T) {
 			Parameters:     "[{\"name\":\"param1\"}]",
 			Status:         model.PipelineVersionReady,
 			PipelineId:     DefaultFakeUUID,
-		}}
+		},
+		Namespace: ""}
 	assert.Equal(t, pipelineExpected, pipeline)
 }
 
@@ -234,7 +235,7 @@ func TestCreatePipeline_ComplexPipeline(t *testing.T) {
 	defer store.Close()
 	manager := NewResourceManager(store)
 
-	createdPipeline, err := manager.CreatePipeline("pipeline1", "", []byte(strings.TrimSpace(
+	createdPipeline, err := manager.CreatePipeline("pipeline1", "", "", []byte(strings.TrimSpace(
 		complexPipeline)))
 	assert.Nil(t, err)
 	_, err = manager.GetPipeline(createdPipeline.UUID)
@@ -255,7 +256,7 @@ func TestCreatePipeline_StorePipelineMetadataError(t *testing.T) {
 	defer store.Close()
 	store.DB().Close()
 	manager := NewResourceManager(store)
-	_, err := manager.CreatePipeline("pipeline1", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	_, err := manager.CreatePipeline("pipeline1", "", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
 	assert.Equal(t, codes.Internal, err.(*util.UserError).ExternalStatusCode())
 	assert.Contains(t, err.Error(), "Failed to start a transaction to create a new pipeline")
 }
@@ -266,7 +267,7 @@ func TestCreatePipeline_CreatePipelineFileError(t *testing.T) {
 	manager := NewResourceManager(store)
 	// Use a bad object store
 	manager.objectStore = &FakeBadObjectStore{}
-	_, err := manager.CreatePipeline("pipeline1", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	_, err := manager.CreatePipeline("pipeline1", "", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
 	assert.Equal(t, codes.Internal, err.(*util.UserError).ExternalStatusCode())
 	assert.Contains(t, err.Error(), "bad object store")
 	// Verify there is a pipeline in DB with status PipelineCreating.
@@ -351,7 +352,7 @@ func TestCreateRun_ThroughPipelineID(t *testing.T) {
 
 	expectedRuntimeWorkflow := testWorkflow.DeepCopy()
 	expectedRuntimeWorkflow.Spec.Arguments.Parameters = []v1alpha1.Parameter{
-		{Name: "param1", Value: util.StringPointer("world")}}
+		{Name: "param1", Value: v1alpha1.AnyStringPtr("world")}}
 	expectedRuntimeWorkflow.Labels = map[string]string{util.LabelKeyWorkflowRunId: "123e4567-e89b-12d3-a456-426655440000"}
 	expectedRuntimeWorkflow.Annotations = map[string]string{util.AnnotationKeyRunName: "run1"}
 	expectedRuntimeWorkflow.Spec.ServiceAccountName = defaultPipelineRunnerServiceAccount
@@ -408,7 +409,7 @@ func TestCreateRun_ThroughWorkflowSpec(t *testing.T) {
 	expectedExperimentUUID := runDetail.ExperimentUUID
 	expectedRuntimeWorkflow := testWorkflow.DeepCopy()
 	expectedRuntimeWorkflow.Spec.Arguments.Parameters = []v1alpha1.Parameter{
-		{Name: "param1", Value: util.StringPointer("world")}}
+		{Name: "param1", Value: v1alpha1.AnyStringPtr("world")}}
 	expectedRuntimeWorkflow.Labels = map[string]string{util.LabelKeyWorkflowRunId: "123e4567-e89b-12d3-a456-426655440000"}
 	expectedRuntimeWorkflow.Annotations = map[string]string{util.AnnotationKeyRunName: "run1"}
 	expectedRuntimeWorkflow.Spec.ServiceAccountName = defaultPipelineRunnerServiceAccount
@@ -457,7 +458,7 @@ func TestCreateRun_ThroughWorkflowSpecWithPatch(t *testing.T) {
 	expectedExperimentUUID := runDetail.ExperimentUUID
 	expectedRuntimeWorkflow := testWorkflow.DeepCopy()
 	expectedRuntimeWorkflow.Spec.Arguments.Parameters = []v1alpha1.Parameter{
-		{Name: "param1", Value: util.StringPointer("test-default-bucket")}}
+		{Name: "param1", Value: v1alpha1.AnyStringPtr("test-default-bucket")}}
 	expectedRuntimeWorkflow.Labels = map[string]string{util.LabelKeyWorkflowRunId: "123e4567-e89b-12d3-a456-426655440000"}
 	expectedRuntimeWorkflow.Annotations = map[string]string{util.AnnotationKeyRunName: "run1"}
 	expectedRuntimeWorkflow.Spec.ServiceAccountName = defaultPipelineRunnerServiceAccount
@@ -543,7 +544,7 @@ func TestCreateRun_ThroughPipelineVersion(t *testing.T) {
 
 	expectedRuntimeWorkflow := testWorkflow.DeepCopy()
 	expectedRuntimeWorkflow.Spec.Arguments.Parameters = []v1alpha1.Parameter{
-		{Name: "param1", Value: util.StringPointer("world")}}
+		{Name: "param1", Value: v1alpha1.AnyStringPtr("world")}}
 	expectedRuntimeWorkflow.Labels = map[string]string{util.LabelKeyWorkflowRunId: "123e4567-e89b-12d3-a456-426655440000"}
 	expectedRuntimeWorkflow.Annotations = map[string]string{util.AnnotationKeyRunName: "run1"}
 	expectedRuntimeWorkflow.Spec.ServiceAccountName = "sa1"
@@ -639,7 +640,7 @@ func TestCreateRun_ThroughPipelineIdAndPipelineVersion(t *testing.T) {
 
 	expectedRuntimeWorkflow := testWorkflow.DeepCopy()
 	expectedRuntimeWorkflow.Spec.Arguments.Parameters = []v1alpha1.Parameter{
-		{Name: "param1", Value: util.StringPointer("world")}}
+		{Name: "param1", Value: v1alpha1.AnyStringPtr("world")}}
 	expectedRuntimeWorkflow.Labels = map[string]string{util.LabelKeyWorkflowRunId: "123e4567-e89b-12d3-a456-426655440000"}
 	expectedRuntimeWorkflow.Annotations = map[string]string{util.AnnotationKeyRunName: "run1"}
 	expectedRuntimeWorkflow.Spec.ServiceAccountName = "sa1"
@@ -1879,7 +1880,7 @@ func TestReportScheduledWorkflowResource_Error(t *testing.T) {
 	workflow := util.NewWorkflow(&v1alpha1.Workflow{
 		TypeMeta:   v1.TypeMeta{APIVersion: "argoproj.io/v1alpha1", Kind: "Workflow"},
 		ObjectMeta: v1.ObjectMeta{Name: "workflow-name"}})
-	p, err := manager.CreatePipeline("1", "", []byte(workflow.ToStringForStore()))
+	p, err := manager.CreatePipeline("1", "", "", []byte(workflow.ToStringForStore()))
 	assert.Nil(t, err)
 
 	// Create job
@@ -2388,7 +2389,7 @@ func TestCreatePipelineVersion(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline before versions.
-	_, err := manager.CreatePipeline("p", "", []byte(testWorkflow.ToStringForStore()))
+	_, err := manager.CreatePipeline("p", "", "", []byte(testWorkflow.ToStringForStore()))
 	assert.Nil(t, err)
 
 	// Create a version under the above pipeline.
@@ -2429,7 +2430,7 @@ func TestCreatePipelineVersion_ComplexPipelineVersion(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline.
-	createdPipeline, err := manager.CreatePipeline("pipeline", "", []byte(strings.TrimSpace(complexPipeline)))
+	createdPipeline, err := manager.CreatePipeline("pipeline", "", "", []byte(strings.TrimSpace(complexPipeline)))
 	assert.Nil(t, err)
 
 	// Create a version under the above pipeline.
@@ -2465,7 +2466,7 @@ func TestCreatePipelineVersion_CreatePipelineVersionFileError(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline.
-	_, err := manager.CreatePipeline("pipeline", "", []byte(strings.TrimSpace(complexPipeline)))
+	_, err := manager.CreatePipeline("pipeline", "", "", []byte(strings.TrimSpace(complexPipeline)))
 	assert.Nil(t, err)
 
 	// Switch to a bad object store
@@ -2504,7 +2505,7 @@ func TestCreatePipelineVersion_GetParametersError(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline.
-	_, err := manager.CreatePipeline("pipeline", "", []byte(testWorkflow.ToStringForStore()))
+	_, err := manager.CreatePipeline("pipeline", "", "", []byte(testWorkflow.ToStringForStore()))
 	assert.Nil(t, err)
 
 	// Create a version under the above pipeline.
@@ -2538,6 +2539,7 @@ func TestCreatePipelineVersion_StorePipelineVersionMetadataError(t *testing.T) {
 	_, err := manager.CreatePipeline(
 		"pipeline",
 		"",
+		"",
 		[]byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
 	assert.Nil(t, err)
 
@@ -2574,7 +2576,7 @@ func TestDeletePipelineVersion(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline.
-	_, err := manager.CreatePipeline("pipeline", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	_, err := manager.CreatePipeline("pipeline", "", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
 	assert.Nil(t, err)
 
 	// Create a version under the above pipeline.
@@ -2611,7 +2613,7 @@ func TestDeletePipelineVersion_FileError(t *testing.T) {
 	manager := NewResourceManager(store)
 
 	// Create a pipeline.
-	_, err := manager.CreatePipeline("pipeline", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	_, err := manager.CreatePipeline("pipeline", "", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
 	assert.Nil(t, err)
 
 	// Create a version under the above pipeline.
