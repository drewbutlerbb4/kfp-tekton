diff a/backend/src/apiserver/server/pipeline_server_test.go b/backend/src/apiserver/server/pipeline_server_test.go	(rejected hunks)
@@ -10,8 +10,10 @@ import (
 	"testing"
 
 	api "github.com/kubeflow/pipelines/backend/api/go_client"
+	"github.com/kubeflow/pipelines/backend/src/apiserver/common"
 	"github.com/kubeflow/pipelines/backend/src/apiserver/resource"
 	"github.com/kubeflow/pipelines/backend/src/common/util"
+	"github.com/spf13/viper"
 	"github.com/stretchr/testify/assert"
 	"google.golang.org/grpc/codes"
 )
@@ -24,11 +26,11 @@ func TestCreatePipeline_YAML(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	pipeline, err := pipelineServer.CreatePipeline(context.Background(), &api.CreatePipelineRequest{
 		Pipeline: &api.Pipeline{
-			Url:  &api.Url{PipelineUrl: httpServer.URL + "/arguments-parameters.yaml"},
-			Name: "argument-parameters",
+			Url:         &api.Url{PipelineUrl: httpServer.URL + "/arguments-parameters.yaml"},
+			Name:        "argument-parameters",
 			Description: "pipeline description",
 		}})
 
@@ -53,11 +55,11 @@ func TestCreatePipeline_Tarball(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	pipeline, err := pipelineServer.CreatePipeline(context.Background(), &api.CreatePipelineRequest{
 		Pipeline: &api.Pipeline{
-			Url:  &api.Url{PipelineUrl: httpServer.URL + "/arguments_tarball/arguments.tar.gz"},
-			Name: "argument-parameters",
+			Url:         &api.Url{PipelineUrl: httpServer.URL + "/arguments_tarball/arguments.tar.gz"},
+			Name:        "argument-parameters",
 			Description: "pipeline description",
 		}})
 
@@ -82,7 +84,7 @@ func TestCreatePipeline_InvalidYAML(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	_, err := pipelineServer.CreatePipeline(context.Background(), &api.CreatePipelineRequest{
 		Pipeline: &api.Pipeline{
 			Url:  &api.Url{PipelineUrl: httpServer.URL + "/invalid-workflow.yaml"},
@@ -102,7 +104,7 @@ func TestCreatePipeline_InvalidURL(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	_, err := pipelineServer.CreatePipeline(context.Background(), &api.CreatePipelineRequest{
 		Pipeline: &api.Pipeline{
 			Url:  &api.Url{PipelineUrl: httpServer.URL + "/invalid-workflow.yaml"},
@@ -121,7 +123,7 @@ func TestCreatePipelineVersion_YAML(t *testing.T) {
 	resourceManager := resource.NewResourceManager(clientManager)
 
 	pipelineServer := PipelineServer{
-		resourceManager: resourceManager, httpClient: httpServer.Client()}
+		resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	pipelineVersion, err := pipelineServer.CreatePipelineVersion(
 		context.Background(), &api.CreatePipelineVersionRequest{
 			Version: &api.PipelineVersion{
@@ -159,7 +161,7 @@ func TestCreatePipelineVersion_InvalidYAML(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	_, err := pipelineServer.CreatePipelineVersion(
 		context.Background(), &api.CreatePipelineVersionRequest{
 			Version: &api.PipelineVersion{
@@ -188,7 +190,7 @@ func TestCreatePipelineVersion_Tarball(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	pipelineVersion, err := pipelineServer.CreatePipelineVersion(
 		context.Background(), &api.CreatePipelineVersionRequest{
 			Version: &api.PipelineVersion{
@@ -226,7 +228,7 @@ func TestCreatePipelineVersion_InvalidURL(t *testing.T) {
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 	_, err := pipelineServer.CreatePipelineVersion(context.Background(), &api.CreatePipelineVersionRequest{
 		Version: &api.PipelineVersion{
 			PackageUrl: &api.Url{
@@ -244,7 +246,7 @@ func TestCreatePipelineVersion_InvalidURL(t *testing.T) {
 	assert.Equal(t, codes.Internal, err.(*util.UserError).ExternalStatusCode())
 }
 
-func TestListPipelineVersion_NoResourceKey(t *testing.T){
+func TestListPipelineVersion_NoResourceKey(t *testing.T) {
 	httpServer := getMockServer(t)
 	// Close the server when test finishes
 	defer httpServer.Close()
@@ -252,16 +254,60 @@ func TestListPipelineVersion_NoResourceKey(t *testing.T){
 	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
 	resourceManager := resource.NewResourceManager(clientManager)
 
-	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client()}
-
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
 
 	_, err := pipelineServer.ListPipelineVersions(context.Background(), &api.ListPipelineVersionsRequest{
 		ResourceKey: nil,
-		PageSize: 20,
+		PageSize:    20,
 	})
 	assert.Equal(t, "Invalid input error: ResourceKey must be set in the input", err.Error())
 }
 
+func TestCreatePipelineVersionDontUpdateDefault(t *testing.T) {
+	viper.Set(common.UpdatePipelineVersionByDefault, "false")
+	defer viper.Set(common.UpdatePipelineVersionByDefault, "true")
+	httpServer := getMockServer(t)
+	// Close the server when test finishes
+	defer httpServer.Close()
+	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
+	resourceManager := resource.NewResourceManager(clientManager)
+
+	pipelineServer := PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
+	pipeline, err := pipelineServer.CreatePipeline(context.Background(), &api.CreatePipelineRequest{
+		Pipeline: &api.Pipeline{
+			Url:         &api.Url{PipelineUrl: httpServer.URL + "/arguments_tarball/arguments.tar.gz"},
+			Name:        "argument-parameters",
+			Description: "pipeline description",
+		}})
+
+	assert.Nil(t, err)
+	assert.NotNil(t, pipeline)
+
+	clientManager.UpdateUUID(util.NewFakeUUIDGeneratorOrFatal("123e4567-e89b-12d3-a456-526655440001", nil))
+	resourceManager = resource.NewResourceManager(clientManager)
+
+	pipelineServer = PipelineServer{resourceManager: resourceManager, httpClient: httpServer.Client(), options: &PipelineServerOptions{CollectMetrics: false}}
+	pipelineVersion, err := pipelineServer.CreatePipelineVersion(
+		context.Background(), &api.CreatePipelineVersionRequest{
+			Version: &api.PipelineVersion{
+				PackageUrl: &api.Url{
+					PipelineUrl: httpServer.URL + "/arguments-parameters.yaml"},
+				Name: "argument-parameters-update",
+				ResourceReferences: []*api.ResourceReference{
+					&api.ResourceReference{
+						Key: &api.ResourceKey{
+							Type: api.ResourceType_PIPELINE,
+							Id:   pipeline.Id,
+						},
+						Relationship: api.Relationship_OWNER,
+					}}}})
+	assert.Nil(t, err)
+
+	pipelines, err := pipelineServer.GetPipeline(context.Background(), &api.GetPipelineRequest{Id: pipeline.Id})
+	assert.NotNil(t, pipelineVersion.Id)
+	assert.NotEqual(t, pipelines.DefaultVersion.Id, pipelineVersion.Id)
+}
+
 func getMockServer(t *testing.T) *httptest.Server {
 	httpServer := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
 		// Send response to be tested
