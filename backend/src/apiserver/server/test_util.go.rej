diff a/backend/src/apiserver/server/test_util.go b/backend/src/apiserver/server/test_util.go	(rejected hunks)
@@ -15,6 +15,7 @@
 package server
 
 import (
+	"context"
 	"testing"
 
 	"github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
@@ -24,12 +25,18 @@ import (
 	"github.com/kubeflow/pipelines/backend/src/apiserver/model"
 	"github.com/kubeflow/pipelines/backend/src/apiserver/resource"
 	"github.com/kubeflow/pipelines/backend/src/common/util"
+	"github.com/pkg/errors"
 	"github.com/spf13/viper"
 	"github.com/stretchr/testify/assert"
 	"google.golang.org/grpc/codes"
+	authorizationv1 "k8s.io/api/authorization/v1"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
+const (
+	invalidPipelineVersionId = "not_exist_pipeline_version"
+)
+
 var testWorkflow = util.NewWorkflow(&v1alpha1.Workflow{
 	TypeMeta:   v1.TypeMeta{APIVersion: "argoproj.io/v1alpha1", Kind: "Workflow"},
 	ObjectMeta: v1.ObjectMeta{Name: "workflow-name", UID: "workflow1", Namespace: "ns1"},
@@ -146,11 +174,59 @@ func initWithExperimentAndPipelineVersion(t *testing.T) (*resource.FakeClientMan
 			},
 		},
 	},
-		[]byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+		[]byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"), true)
 
 	return clientManager, resourceManager, experiment
 }
 
+func initWithExperimentsAndTwoPipelineVersions(t *testing.T) (*resource.FakeClientManager, *resource.ResourceManager, *model.Experiment) {
+	initEnvVars()
+	clientManager := resource.NewFakeClientManagerOrFatal(util.NewFakeTimeForEpoch())
+	resourceManager := resource.NewResourceManager(clientManager)
+
+	// Create an experiment.
+	apiExperiment := &api.Experiment{Name: "exp1"}
+	experiment, err := resourceManager.CreateExperiment(apiExperiment)
+	assert.Nil(t, err)
+
+	// Create a pipeline and then a pipeline version.
+	_, err = resourceManager.CreatePipeline("pipeline", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	assert.Nil(t, err)
+	_, err = resourceManager.CreatePipelineVersion(&api.PipelineVersion{
+		Name: "pipeline_version",
+		ResourceReferences: []*api.ResourceReference{
+			&api.ResourceReference{
+				Key: &api.ResourceKey{
+					Id:   resource.DefaultFakeUUID,
+					Type: api.ResourceType_PIPELINE,
+				},
+				Relationship: api.Relationship_OWNER,
+			},
+		},
+	},
+		[]byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"), true)
+
+	clientManager.UpdateUUID(util.NewFakeUUIDGeneratorOrFatal(resource.NonDefaultFakeUUID, nil))
+	resourceManager = resource.NewResourceManager(clientManager)
+	// Create another pipeline and then pipeline version.
+	_, err = resourceManager.CreatePipeline("anpther-pipeline", "", []byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"))
+	assert.Nil(t, err)
+	_, err =  resourceManager.CreatePipelineVersion(&api.PipelineVersion{
+		Name: "another_pipeline_version",
+		ResourceReferences: []*api.ResourceReference{
+			&api.ResourceReference{
+				Key: &api.ResourceKey{
+					Id:   resource.NonDefaultFakeUUID,
+					Type: api.ResourceType_PIPELINE,
+				},
+				Relationship: api.Relationship_OWNER,
+			},
+		},
+	},
+		[]byte("apiVersion: argoproj.io/v1alpha1\nkind: Workflow"), true)
+	return clientManager, resourceManager, experiment
+}
+
 func initWithOneTimeRun(t *testing.T) (*resource.FakeClientManager, *resource.ResourceManager, *model.RunDetail) {
 	clientManager, manager, exp := initWithExperiment(t)
 	apiRun := &api.Run{
