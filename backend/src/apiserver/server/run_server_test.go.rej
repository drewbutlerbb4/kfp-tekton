diff a/backend/src/apiserver/server/run_server_test.go b/backend/src/apiserver/server/run_server_test.go	(rejected hunks)
@@ -2,12 +2,14 @@ package server
 
 import (
 	"context"
+	"github.com/kubeflow/pipelines/backend/src/apiserver/resource"
 	"strings"
 	"testing"
 
 	"github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
 	"github.com/golang/protobuf/ptypes/timestamp"
 	"github.com/google/go-cmp/cmp"
+	"github.com/google/go-cmp/cmp/cmpopts"
 	api "github.com/kubeflow/pipelines/backend/api/go_client"
 	"github.com/kubeflow/pipelines/backend/src/apiserver/common"
 	"github.com/kubeflow/pipelines/backend/src/common/util"
@@ -15,12 +17,13 @@ import (
 	"github.com/stretchr/testify/assert"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/metadata"
+	authorizationv1 "k8s.io/api/authorization/v1"
 )
 
 func TestCreateRun(t *testing.T) {
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewRunServer(manager)
+	server := NewRunServer(manager, &RunServerOptions{CollectMetrics: false})
 	run := &api.Run{
 		Name:               "run1",
 		ResourceReferences: validReference,
@@ -68,7 +71,7 @@ func TestCreateRun(t *testing.T) {
 func TestCreateRunPatch(t *testing.T) {
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewRunServer(manager)
+	server := NewRunServer(manager, &RunServerOptions{CollectMetrics: false})
 	run := &api.Run{
 		Name:               "run1",
 		ResourceReferences: validReference,
@@ -153,7 +168,7 @@ func TestCreateRun_Multiuser(t *testing.T) {
 
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewRunServer(manager)
+	server := NewRunServer(manager, &RunServerOptions{CollectMetrics: false})
 	run := &api.Run{
 		Name:               "run1",
 		ResourceReferences: validReference,
@@ -201,7 +216,7 @@ func TestCreateRun_Multiuser(t *testing.T) {
 func TestListRun(t *testing.T) {
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewRunServer(manager)
+	server := NewRunServer(manager, &RunServerOptions{CollectMetrics: false})
 	run := &api.Run{
 		Name:               "run1",
 		ResourceReferences: validReference,
@@ -254,7 +269,20 @@ func TestListRuns_Unauthorized(t *testing.T) {
 		},
 	})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbList,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeRuns,
+	}
+	assert.EqualError(
+		t,
+		err,
+		util.Wrap(
+			wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes)),
+			"Failed to authorize with namespace resource reference.").Error(),
+	)
 }
 
 func TestListRuns_Multiuser(t *testing.T) {
@@ -266,7 +294,7 @@ func TestListRuns_Multiuser(t *testing.T) {
 
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewRunServer(manager)
+	server := NewRunServer(manager, &RunServerOptions{CollectMetrics: false})
 	run := &api.Run{
 		Name:               "run1",
 		ResourceReferences: validReference,
@@ -375,7 +403,8 @@ func TestListRuns_Multiuser(t *testing.T) {
 		} else {
 			if err != nil {
 				t.Errorf("TestListRuns_Multiuser(%v) expect no error but got %v", tc.name, err)
-			} else if !cmp.Equal(tc.expectedRuns, response.Runs) {
+			} else if !cmp.Equal(tc.expectedRuns, response.Runs, cmpopts.IgnoreFields(api.Run{}, "CreatedAt"),
+				cmpopts.IgnoreFields(api.Run{}, "ScheduledAt"), cmpopts.IgnoreFields(api.Run{}, "FinishedAt")) {
 				t.Errorf("TestListRuns_Multiuser(%v) expect (%+v) but got (%+v)", tc.name, tc.expectedRuns, response.Runs)
 			}
 		}
@@ -594,9 +671,9 @@ func TestCanAccessRun_Unauthorized(t *testing.T) {
 	viper.Set(common.MultiUserMode, "true")
 	defer viper.Set(common.MultiUserMode, "false")
 
-	clients, manager, experiment := initWithExperiment_KFAM_Unauthorized(t)
+	clients, manager, experiment := initWithExperiment_SubjectAccessReview_Unauthorized(t)
 	defer clients.Close()
-	runServer := RunServer{resourceManager: manager}
+	runServer := RunServer{resourceManager: manager, options: &RunServerOptions{CollectMetrics: false}}
 
 	md := metadata.New(map[string]string{common.GoogleIAPUserIdentityHeader: common.GoogleIAPUserIdentityPrefix + "user@google.com"})
 	ctx := metadata.NewIncomingContext(context.Background(), md)
@@ -622,9 +699,21 @@ func TestCanAccessRun_Unauthorized(t *testing.T) {
 	}
 	runDetail, _ := manager.CreateRun(apiRun)
 
-	err := runServer.canAccessRun(ctx, runDetail.UUID)
+	err := runServer.canAccessRun(ctx, runDetail.UUID, &authorizationv1.ResourceAttributes{Verb: common.RbacResourceVerbGet})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: runDetail.Namespace,
+		Verb:      common.RbacResourceVerbGet,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeRuns,
+		Name:      runDetail.Name,
+	}
+	assert.EqualError(
+		t,
+		err,
+		wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes)).Error(),
+	)
 }
 
 func TestCanAccessRun_Authorized(t *testing.T) {
@@ -633,7 +722,7 @@ func TestCanAccessRun_Authorized(t *testing.T) {
 
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	runServer := RunServer{resourceManager: manager}
+	runServer := RunServer{resourceManager: manager, options: &RunServerOptions{CollectMetrics: false}}
 
 	md := metadata.New(map[string]string{common.GoogleIAPUserIdentityHeader: common.GoogleIAPUserIdentityPrefix + "user@google.com"})
 	ctx := metadata.NewIncomingContext(context.Background(), md)
@@ -655,6 +744,6 @@ func TestCanAccessRun_Authorized(t *testing.T) {
 	}
 	runDetail, _ := manager.CreateRun(apiRun)
 
-	err := runServer.canAccessRun(ctx, runDetail.UUID)
+	err := runServer.canAccessRun(ctx, runDetail.UUID, &authorizationv1.ResourceAttributes{Verb: common.RbacResourceVerbGet})
 	assert.Nil(t, err)
 }
