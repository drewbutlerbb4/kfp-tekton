diff a/backend/src/apiserver/server/job_server_test.go b/backend/src/apiserver/server/job_server_test.go	(rejected hunks)
@@ -7,6 +7,7 @@ import (
 
 	"github.com/golang/protobuf/ptypes/timestamp"
 	"github.com/google/go-cmp/cmp"
+	"github.com/google/go-cmp/cmp/cmpopts"
 	api "github.com/kubeflow/pipelines/backend/api/go_client"
 	"github.com/kubeflow/pipelines/backend/src/apiserver/client"
 	"github.com/kubeflow/pipelines/backend/src/apiserver/common"
@@ -16,6 +17,7 @@ import (
 	"github.com/stretchr/testify/assert"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/metadata"
+	authorizationv1 "k8s.io/api/authorization/v1"
 )
 
 var (
@@ -192,7 +242,7 @@ func TestValidateApiJob_InvalidCron(t *testing.T) {
 func TestValidateApiJob_MaxConcurrencyOutOfRange(t *testing.T) {
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	apiJob := &api.Job{
 		Name:           "job1",
 		Enabled:        true,
@@ -218,7 +268,7 @@ func TestValidateApiJob_MaxConcurrencyOutOfRange(t *testing.T) {
 func TestValidateApiJob_NegativeIntervalSecond(t *testing.T) {
 	clients, manager, experiment := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	apiJob := &api.Job{
 		Name:           "job1",
 		Enabled:        true,
@@ -243,7 +293,7 @@ func TestValidateApiJob_NegativeIntervalSecond(t *testing.T) {
 func TestCreateJob(t *testing.T) {
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	job, err := server.CreateJob(nil, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 	assert.Equal(t, commonExpectedJob, job)
@@ -256,12 +306,24 @@ func TestCreateJob_Unauthorized(t *testing.T) {
 	md := metadata.New(map[string]string{common.GoogleIAPUserIdentityHeader: common.GoogleIAPUserIdentityPrefix + "user@google.com"})
 	ctx := metadata.NewIncomingContext(context.Background(), md)
 
-	clients, manager, _ := initWithExperiment_KFAM_Unauthorized(t)
+	clients, manager, _ := initWithExperiment_SubjectAccessReview_Unauthorized(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	_, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbCreate,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeJobs,
+		Name:      commonApiJob.Name,
+	}
+	assert.EqualError(
+		t,
+		err,
+		wrapFailedAuthzRequestError(wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes))).Error(),
+	)
 }
 
 func TestGetJob_Unauthorized(t *testing.T) {
@@ -273,17 +335,29 @@ func TestGetJob_Unauthorized(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	job, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 
-	clients.KfamClientFake = client.NewFakeKFAMClientUnauthorized()
+	clients.SubjectAccessReviewClientFake = client.NewFakeSubjectAccessReviewClientUnauthorized()
 	manager = resource.NewResourceManager(clients)
-	server = NewJobServer(manager)
+	server = NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 
 	_, err = server.GetJob(ctx, &api.GetJobRequest{Id: job.Id})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbGet,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeJobs,
+		Name:      job.Name,
+	}
+	assert.EqualError(
+		t,
+		err,
+		wrapFailedAuthzRequestError(wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes))).Error(),
+	)
 }
 
 func TestGetJob_Multiuser(t *testing.T) {
@@ -295,7 +369,7 @@ func TestGetJob_Multiuser(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	createdJob, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 
@@ -311,9 +385,9 @@ func TestListJobs_Unauthorized(t *testing.T) {
 	md := metadata.New(map[string]string{common.GoogleIAPUserIdentityHeader: common.GoogleIAPUserIdentityPrefix + "user@google.com"})
 	ctx := metadata.NewIncomingContext(context.Background(), md)
 
-	clients, manager, experiment := initWithExperiment_KFAM_Unauthorized(t)
+	clients, manager, experiment := initWithExperiment_SubjectAccessReview_Unauthorized(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	_, err := server.ListJobs(ctx, &api.ListJobsRequest{
 		ResourceReferenceKey: &api.ResourceKey{
 			Type: api.ResourceType_EXPERIMENT,
@@ -321,7 +395,21 @@ func TestListJobs_Unauthorized(t *testing.T) {
 		},
 	})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbList,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeJobs,
+	}
+	assert.EqualError(
+		t,
+		err,
+		util.Wrap(
+			wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes)),
+			"Failed to authorize with namespace in experiment resource reference.",
+		).Error(),
+	)
 
 	_, err = server.ListJobs(ctx, &api.ListJobsRequest{
 		ResourceReferenceKey: &api.ResourceKey{
@@ -330,7 +418,14 @@ func TestListJobs_Unauthorized(t *testing.T) {
 		},
 	})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	assert.EqualError(
+		t,
+		err,
+		util.Wrap(
+			wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes)),
+			"Failed to authorize with namespace resource reference.",
+		).Error(),
+	)
 }
 
 func TestListJobs_Multiuser(t *testing.T) {
@@ -342,7 +437,7 @@ func TestListJobs_Multiuser(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	_, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 
@@ -426,7 +521,9 @@ func TestListJobs_Multiuser(t *testing.T) {
 		} else {
 			if err != nil {
 				t.Errorf("TestListJobs_Multiuser(%v) expect no error but got %v", tc.name, err)
-			} else if !cmp.Equal(tc.expectedJobs, response.Jobs) {
+			} else if !cmp.Equal(tc.expectedJobs, response.Jobs, cmpopts.IgnoreFields(api.Job{}, "Trigger"),
+				cmpopts.IgnoreFields(api.Run{}, "CreatedAt"), cmpopts.IgnoreFields(api.Job{}, "UpdatedAt"),
+				cmpopts.IgnoreFields(api.Job{}, "CreatedAt")) {
 				t.Errorf("TestListJobs_Multiuser(%v) expect (%+v) but got (%+v)", tc.name, tc.expectedJobs, response.Jobs)
 			}
 		}
@@ -442,17 +539,29 @@ func TestEnableJob_Unauthorized(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	job, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 
-	clients.KfamClientFake = client.NewFakeKFAMClientUnauthorized()
+	clients.SubjectAccessReviewClientFake = client.NewFakeSubjectAccessReviewClientUnauthorized()
 	manager = resource.NewResourceManager(clients)
-	server = NewJobServer(manager)
+	server = NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 
 	_, err = server.EnableJob(ctx, &api.EnableJobRequest{Id: job.Id})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbEnable,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeJobs,
+		Name:      commonApiJob.Name,
+	}
+	assert.EqualError(
+		t,
+		err,
+		wrapFailedAuthzRequestError(wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes))).Error(),
+	)
 }
 
 func TestEnableJob_Multiuser(t *testing.T) {
@@ -464,7 +573,7 @@ func TestEnableJob_Multiuser(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 
 	job, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
@@ -482,17 +591,29 @@ func TestDisableJob_Unauthorized(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 	job, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
 
-	clients.KfamClientFake = client.NewFakeKFAMClientUnauthorized()
+	clients.SubjectAccessReviewClientFake = client.NewFakeSubjectAccessReviewClientUnauthorized()
 	manager = resource.NewResourceManager(clients)
-	server = NewJobServer(manager)
+	server = NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 
 	_, err = server.DisableJob(ctx, &api.DisableJobRequest{Id: job.Id})
 	assert.NotNil(t, err)
-	assert.Contains(t, err.Error(), "Unauthorized access")
+	resourceAttributes := &authorizationv1.ResourceAttributes{
+		Namespace: "ns1",
+		Verb:      common.RbacResourceVerbDisable,
+		Group:     common.RbacPipelinesGroup,
+		Version:   common.RbacPipelinesVersion,
+		Resource:  common.RbacResourceTypeJobs,
+		Name:      job.Name,
+	}
+	assert.EqualError(
+		t,
+		err,
+		wrapFailedAuthzRequestError(wrapFailedAuthzApiResourcesError(getPermissionDeniedError(ctx, resourceAttributes))).Error(),
+	)
 }
 
 func TestDisableJob_Multiuser(t *testing.T) {
@@ -504,7 +625,7 @@ func TestDisableJob_Multiuser(t *testing.T) {
 
 	clients, manager, _ := initWithExperiment(t)
 	defer clients.Close()
-	server := NewJobServer(manager)
+	server := NewJobServer(manager, &JobServerOptions{CollectMetrics: false})
 
 	job, err := server.CreateJob(ctx, &api.CreateJobRequest{Job: commonApiJob})
 	assert.Nil(t, err)
