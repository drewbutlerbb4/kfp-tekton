diff a/backend/src/common/util/formatter_test.go b/backend/src/common/util/formatter_test.go	(rejected hunks)
@@ -120,12 +120,12 @@ func TestFormatParameter(t *testing.T) {
 
 	param := v1alpha1.Parameter{
 		Name:  "PARAM_NAME",
-		Value: StringPointer("PARAM_PREFIX_[[uuid]]_SUFFIX"),
+		Value: v1alpha1.AnyStringPtr("PARAM_PREFIX_[[uuid]]_SUFFIX"),
 	}
 
 	expected := v1alpha1.Parameter{
 		Name:  "PARAM_NAME",
-		Value: StringPointer("PARAM_PREFIX_" + defaultUUID + "_SUFFIX"),
+		Value: v1alpha1.AnyStringPtr("PARAM_PREFIX_" + defaultUUID + "_SUFFIX"),
 	}
 
 	result, err := formatter.formatParameter(param)
@@ -141,7 +141,7 @@ func TestFormatParameterError(t *testing.T) {
 
 	param := v1alpha1.Parameter{
 		Name:  "PARAM_NAME",
-		Value: StringPointer("PARAM_PREFIX_[[uuid]]_SUFFIX"),
+		Value: v1alpha1.AnyStringPtr("PARAM_PREFIX_[[uuid]]_SUFFIX"),
 	}
 
 	result, err := formatter.formatParameter(param)
@@ -160,8 +160,8 @@ func TestFormatNothingToDoExceptAddUUID(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1")},
-					{Name: "param2", Value: StringPointer("value2")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2")},
 				},
 			}}}
 
@@ -170,8 +170,8 @@ func TestFormatNothingToDoExceptAddUUID(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1")},
-					{Name: "param2", Value: StringPointer("value2")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2")},
 				},
 			}}}
 
@@ -191,8 +191,8 @@ func TestFormatEverytingToChange(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1-[[schedule]]")},
-					{Name: "param2", Value: StringPointer("value2-[[now]]-suffix")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1-[[schedule]]")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2-[[now]]-suffix")},
 				},
 			}}}
 
@@ -201,8 +201,8 @@ func TestFormatEverytingToChange(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1-20170706050403")},
-					{Name: "param2", Value: StringPointer("value2-20180807060504-suffix")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1-20170706050403")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2-20180807060504-suffix")},
 				},
 			}}}
 
@@ -290,8 +290,8 @@ func TestFormatOnlyWorkflowParameters(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1-[[schedule]]")},
-					{Name: "param2", Value: StringPointer("value2-[[now]]-suffix")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1-[[schedule]]")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2-[[now]]-suffix")},
 				},
 			}}}
 
@@ -300,8 +300,8 @@ func TestFormatOnlyWorkflowParameters(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1-20170706050403")},
-					{Name: "param2", Value: StringPointer("value2-20180807060504-suffix")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1-20170706050403")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2-20180807060504-suffix")},
 				},
 			}}}
 
@@ -337,8 +337,8 @@ func TestFormatError(t *testing.T) {
 		Spec: v1alpha1.WorkflowSpec{
 			Arguments: v1alpha1.Arguments{
 				Parameters: []v1alpha1.Parameter{
-					{Name: "param1", Value: StringPointer("value1-[[schedule]]-[[uuid]]")},
-					{Name: "param2", Value: StringPointer("value2-[[now]]-suffix")},
+					{Name: "param1", Value: v1alpha1.AnyStringPtr("value1-[[schedule]]-[[uuid]]")},
+					{Name: "param2", Value: v1alpha1.AnyStringPtr("value2-[[now]]-suffix")},
 				},
 			}}}
 
