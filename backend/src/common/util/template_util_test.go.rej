diff a/backend/src/common/util/template_util_test.go b/backend/src/common/util/template_util_test.go	(rejected hunks)
@@ -21,14 +21,14 @@ import (
 	"github.com/ghodss/yaml"
 	"github.com/stretchr/testify/assert"
 	"google.golang.org/grpc/codes"
-	"k8s.io/apimachinery/pkg/apis/meta/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
 func TestGetParameters(t *testing.T) {
 	template := v1alpha1.Workflow{
 		TypeMeta: v1.TypeMeta{APIVersion: "argoproj.io/v1alpha1", Kind: "Workflow"},
 		Spec: v1alpha1.WorkflowSpec{Arguments: v1alpha1.Arguments{
-			Parameters: []v1alpha1.Parameter{{Name: "name1", Value: StringPointer("value1")}}}}}
+			Parameters: []v1alpha1.Parameter{{Name: "name1", Value: v1alpha1.AnyStringPtr("value1")}}}}}
 	templateBytes, _ := yaml.Marshal(template)
 	paramString, err := GetParameters(templateBytes)
 	assert.Nil(t, err)
@@ -39,7 +39,7 @@ func TestGetParameters_ParametersTooLong(t *testing.T) {
 	var params []v1alpha1.Parameter
 	// Create a long enough parameter string so it exceed the length limit of parameter.
 	for i := 0; i < 10000; i++ {
-		params = append(params, v1alpha1.Parameter{Name: "name1", Value: StringPointer("value1")})
+		params = append(params, v1alpha1.Parameter{Name: "name1", Value: v1alpha1.AnyStringPtr("value1")})
 	}
 	template := v1alpha1.Workflow{Spec: v1alpha1.WorkflowSpec{Arguments: v1alpha1.Arguments{
 		Parameters: params}}}
